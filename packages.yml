# Configure automatic updates for ebuilds.
app-admin/1password:
  resolver: apt
  options:
    repository: "deb https://downloads.1password.com/linux/debian/amd64 stable main"
    package: 1password
app-admin/google-cloud-cli-bin:
  resolver: apt
  options:
    repository: "deb https://packages.cloud.google.com/apt cloud-sdk main"
    package: google-cloud-cli
app-admin/op-cli-bin:
  resolver: apt
  options:
    repository: "deb https://downloads.1password.com/linux/debian/amd64 stable main"
    package: 1password-cli
dev-util/mise:
  resolver: git
  options:
    disable_semver: true
    url: https://github.com/jdx/mise

  # We have to regenerate the ebuild to get new crates and licenses to
  # be reflected, so we have to have custom steps.
  steps:
    - checkout: https://github.com/jdx/mise
    - original_ebuild: mise.ebuild
    - command: |-
        set -euxo pipefail

        # Generate a license-mapping.conf with our required license
        # until https://github.com/gentoo/gentoo/pull/41856 lands.
        lm=$(mktemp)
        cp /var/db/repos/gentoo/metadata/license-mapping.conf "$lm"
        echo "CDLA-Permissive-2.0 = CDLA-Permissive-2.0" >> "$lm"

        # Download the license
        wget -O "/var/db/repos/gentoo/licenses/CDLA-Permissive-2.0" \
          "https://github.com/gentoo/gentoo/raw/12ee1aba530e7178dd8ab98010999c77376cacca/licenses/CDLA-Permissive-2.0"

        pycargoebuild --license-mapping "$lm" --crate-tarball --crate-tarball-path crates.tar.xz \
          -i mise.ebuild
    - upload_artifact: crates.tar.xz
    - ebuild: mise.ebuild
net-im/legcord:
  resolver: git
  options:
    url: https://github.com/Legcord/Legcord
net-vpn/tailscale:
  resolver: git
  options:
    url: https://github.com/tailscale/tailscale

  # We have to generate a Go dependency archive and upload it to a
  # stable location, so we do that during this process.
  steps:
    - checkout: https://github.com/tailscale/tailscale
    - original_ebuild: new.ebuild
    - generate_go_deps: full
    - command: |-
        set -euxo pipefail

        # Get the shell variables and rewrite the ebuild to contain
        # them.
        eval "$(./build_dist.sh shellvars)"
        sed -i 's/VERSION_MINOR=".*"/VERSION_MINOR="'"${VERSION_MINOR}"'"/' new.ebuild
        sed -i 's/VERSION_SHORT=".*"/VERSION_SHORT="'"${VERSION_SHORT}"'"/' new.ebuild
        sed -i 's/VERSION_LONG=".*"/VERSION_LONG="'"${VERSION_LONG}"'"/' new.ebuild
        sed -i 's/VERSION_GIT_HASH=".*"/VERSION_GIT_HASH="'"${VERSION_GIT_HASH}"'"/' new.ebuild
    - upload_artifact: deps.tar.xz
    - ebuild: new.ebuild
app-admin/chezmoi:
  resolver: git
  options:
    url: https://github.com/twpayne/chezmoi

  # We have to generate a Go dependency archive and upload it to a
  # stable location, so we do that during this process.
  steps:
    - checkout: https://github.com/twpayne/chezmoi
    - original_ebuild: new.ebuild
    - generate_go_deps: full
    - command: |-
        set -euxo pipefail

        # Get the shell variables and rewrite the ebuild to contain
        # them.
        VERSION_GIT_HASH=$(go tool generate-commit)
        sed -i 's/VERSION_GIT_HASH=".*"/VERSION_GIT_HASH="'"${VERSION_GIT_HASH}"'"/' new.ebuild
    - upload_artifact: deps.tar.xz
    - ebuild: new.ebuild

dev-util/glab:
  resolver: git
  options:
    url: https://gitlab.com/gitlab-org/cli.git

  # We have to generate a Go dependency archive and upload it to a
  # stable location, so we do that during this process.
  steps:
    - checkout: https://gitlab.com/gitlab-org/cli
    - original_ebuild: new.ebuild
    - generate_go_deps: full
    - upload_artifact: deps.tar.xz
    - ebuild: new.ebuild

dev-util/doppler:
  resolver: git
  options:
    url: https://github.com/DopplerHQ/cli

  # We have to generate a Go dependency archive and upload it to a
  # stable location, so we do that during this process.
  steps:
    - checkout: https://github.com/DopplerHQ/cli
    - original_ebuild: new.ebuild
    - generate_go_deps: full
    - upload_artifact: deps.tar.xz
    - ebuild: new.ebuild

dev-util/stencil:
  resolver: git
  options:
    url: https://github.com/rgst-io/stencil

  # We have to generate a Go dependency archive and upload it to a
  # stable location, so we do that during this process.
  steps:
    - checkout: https://github.com/rgst-io/stencil
    - original_ebuild: new.ebuild
    - generate_go_deps: full
    - command: |-
        set -euxo pipefail

        # Get the shell variables and rewrite the ebuild to contain
        # them.
        VERSION_GIT_HASH=$(git rev-parse HEAD)
        sed -i 's/VERSION_GIT_HASH=".*"/VERSION_GIT_HASH="'"${VERSION_GIT_HASH}"'"/' new.ebuild
    - upload_artifact: deps.tar.xz
    - ebuild: new.ebuild

dev-vcs/git-credential-oauth:
  resolver: git
  options:
    url: https://github.com/hickford/git-credential-oauth

  steps:
    - checkout: https://github.com/hickford/git-credential-oauth
    - original_ebuild: new.ebuild
    - generate_go_deps: full
    - upload_artifact: deps.tar.xz
    - ebuild: new.ebuild

dev-util/forgejo-cli:
  resolver: git
  options:
    url: https://codeberg.org/Cyborus/forgejo-cli
  steps:
    - checkout: https://codeberg.org/Cyborus/forgejo-cli
    - original_ebuild: forgejo-cli.ebuild
    - command: |-
        set -euxo pipefail

        pycargoebuild --crate-tarball --crate-tarball-path crates.tar.xz \
          -i forgejo-cli.ebuild
    - upload_artifact: crates.tar.xz
    - ebuild: forgejo-cli.ebuild
